name: Deploy to ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: kddev-server
  ECS_SERVICE: kd-server-task1-service-r9y9w2sr
  ECS_CLUSTER: kd-dev1-cluster
  ECS_TASK_DEFINITION: kd-server-task1

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image with commit SHA tag
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # Push image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition and clean it
      run: |
        # Download the task definition
        aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > task-definition-raw.json
        
        # Remove AWS-managed fields and unsupported fields to avoid compatibility issues
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy, .enableFaultInjection)' task-definition-raw.json > task-definition.json
        
        # Show the cleaned task definition for debugging
        echo "Cleaned task definition:"
        cat task-definition.json

    - name: Update ECS service with new image
      run: |
        # Get current task definition
        aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > current-task-def.json
        
        # Create new task definition with updated image
        jq --arg IMAGE "${{ steps.build-image.outputs.image }}" \
           'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy, .enableFaultInjection) | 
            .containerDefinitions[0].image = $IMAGE' \
           current-task-def.json > new-task-def.json
        
        # Register new task definition
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://new-task-def.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "New task definition ARN: $NEW_TASK_DEF_ARN"
        
        # Update service to use new task definition
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition $NEW_TASK_DEF_ARN
        
        # Wait for deployment to complete
        echo "Waiting for service to stabilize..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE
        
        echo "‚úÖ Deployment completed successfully!"

    - name: Deployment summary
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üì¶ Image: ${{ steps.build-image.outputs.image }}"
        echo "üè∑Ô∏è  Tag: ${{ github.sha }}"
        echo "üéØ Service: ${{ env.ECS_SERVICE }}"
        echo "‚òÅÔ∏è  Cluster: ${{ env.ECS_CLUSTER }}"